import React, { useState, useEffect } from "react";
import ReactApexChart from "react-apexcharts";
import { Typography } from "antd";
import axios from "axios";
import { createGlobalStyle } from "styled-components";

function LineChart({ data }) {
  const { Title } = Typography;
  const [defectColors, setDefectColors] = useState({});

  useEffect(() => {
    // Fetch defect colors from the API
    axios.get('http://143.110.184.45:8100/defect/')
      .then(response => {
        // Organize the response data as an object with defect names as keys and color codes as values
        const colors = {};
        response.data.forEach(defect => {
          colors[defect.name] = defect.color_code;
        });
        // Set the defect colors state
        setDefectColors(colors);
      })
      .catch(error => {
        console.error('Error fetching defect colors:', error);
      });
  }, []);

  if (!Array.isArray(data)) {
    return <div>Loading...</div>; // or some other fallback UI
  }
  const recordedDates = data.map(report => report.recorded_date_time);

  // Extract unique defect names
  const defectNames = [...new Set(data.map(defect => defect.defect_name))];
  
  
  // Group defects by date and count occurrences of each defect type
  const groupedData = {};
  data.forEach(defect => {
    let dateString = defect.recorded_date_time;
    if (dateString.includes('T')) {
      dateString = dateString.split('T')[0];
    } else {
      dateString = dateString.split(' ')[0];
    }
    
    if (!groupedData[dateString]) {
      groupedData[dateString] = {};
    }
    defectNames.forEach(defectName => {
      if (!groupedData[dateString][defectName]) {
        groupedData[dateString][defectName] = 0;
      }
      if (defect.defect_name === defectName) {
        groupedData[dateString][defectName]++;
      }
    });
  });

  // Sort the dates in ascending order
  const sortedDates = Object.keys(groupedData).sort((a, b) => new Date(a) - new Date(b));
  // Prepare series data with dynamically assigned colors
  const seriesData = defectNames.map((defectName, index) => ({
    name: defectName,
    data: sortedDates.map(date => groupedData[date][defectName] || 0),
    color: defectColors[defectName] || ['#FF5733', '#e31f09', '#3357FF'][index % 3] // Use custom colors for bars or fallback to defaults
  }));
  // Prepare data for the line chart
  const chartData = {
    series: seriesData,
    options: {
      chart: {
        width: "100%",
        height: 350,
        type: "area",
        toolbar: {
          show: false,
        },
      },
      legend: {
        show: true, // Show legend to distinguish between different defect names
      },
      dataLabels: {
        enabled: false,
      },
      stroke: {
        curve: "smooth",
      },
      yaxis: {
        min: 0, // Set the minimum value of y-axis to 0
        labels: {
          style: {
            fontSize: "14px",
            fontWeight: 600,
            colors: ["#8c8c8c"],
          },
        },
      },
      xaxis: {
        labels: {
          style: {
            fontSize: "14px",
            fontWeight: 600,
            colors: ["#8c8c8c"],
          },
        },
        categories: sortedDates, // Set categories as sorted dates
      },
      tooltip: {
        y: {
          formatter: function (val) {
            return val;
          },
        },
      },
    },
  };

  return (
    <div className="linechart">
      <div>
        <Title level={5}>Defects Count</Title>
      </div>
      <ReactApexChart
        className="full-width"
        options={chartData.options}
        series={chartData.series}
        type="line"
        height={350}
        width={"100%"}
      />
    </div>
  );
}

export default LineChart;
